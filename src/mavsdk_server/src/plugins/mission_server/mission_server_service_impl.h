// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/mission_server/mission_server.proto)

#include "mission_server/mission_server.grpc.pb.h"
#include "plugins/mission_server/mission_server.h"

#include "mavsdk.h"
#include "lazy_plugin.h"
#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<typename MissionServer = MissionServer, typename LazyPlugin = LazyPlugin<MissionServer>>
class MissionServerServiceImpl final : public rpc::mission_server::MissionServerService::Service {
public:
    MissionServerServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}

    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::MissionServer::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_mission_server_result = new rpc::mission_server::MissionServerResult();
        rpc_mission_server_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_mission_server_result->set_result_str(ss.str());

        response->set_allocated_mission_server_result(rpc_mission_server_result);
    }

    static rpc::mission_server::MissionItem::CameraAction translateToRpcCameraAction(
        const mavsdk::MissionServer::MissionItem::CameraAction& camera_action)
    {
        switch (camera_action) {
            default:
                LogErr() << "Unknown camera_action enum value: " << static_cast<int>(camera_action);
            // FALLTHROUGH
            case mavsdk::MissionServer::MissionItem::CameraAction::None:
                return rpc::mission_server::MissionItem_CameraAction_CAMERA_ACTION_NONE;
            case mavsdk::MissionServer::MissionItem::CameraAction::TakePhoto:
                return rpc::mission_server::MissionItem_CameraAction_CAMERA_ACTION_TAKE_PHOTO;
            case mavsdk::MissionServer::MissionItem::CameraAction::StartPhotoInterval:
                return rpc::mission_server::
                    MissionItem_CameraAction_CAMERA_ACTION_START_PHOTO_INTERVAL;
            case mavsdk::MissionServer::MissionItem::CameraAction::StopPhotoInterval:
                return rpc::mission_server::
                    MissionItem_CameraAction_CAMERA_ACTION_STOP_PHOTO_INTERVAL;
            case mavsdk::MissionServer::MissionItem::CameraAction::StartVideo:
                return rpc::mission_server::MissionItem_CameraAction_CAMERA_ACTION_START_VIDEO;
            case mavsdk::MissionServer::MissionItem::CameraAction::StopVideo:
                return rpc::mission_server::MissionItem_CameraAction_CAMERA_ACTION_STOP_VIDEO;
        }
    }

    static mavsdk::MissionServer::MissionItem::CameraAction
    translateFromRpcCameraAction(const rpc::mission_server::MissionItem::CameraAction camera_action)
    {
        switch (camera_action) {
            default:
                LogErr() << "Unknown camera_action enum value: " << static_cast<int>(camera_action);
            // FALLTHROUGH
            case rpc::mission_server::MissionItem_CameraAction_CAMERA_ACTION_NONE:
                return mavsdk::MissionServer::MissionItem::CameraAction::None;
            case rpc::mission_server::MissionItem_CameraAction_CAMERA_ACTION_TAKE_PHOTO:
                return mavsdk::MissionServer::MissionItem::CameraAction::TakePhoto;
            case rpc::mission_server::MissionItem_CameraAction_CAMERA_ACTION_START_PHOTO_INTERVAL:
                return mavsdk::MissionServer::MissionItem::CameraAction::StartPhotoInterval;
            case rpc::mission_server::MissionItem_CameraAction_CAMERA_ACTION_STOP_PHOTO_INTERVAL:
                return mavsdk::MissionServer::MissionItem::CameraAction::StopPhotoInterval;
            case rpc::mission_server::MissionItem_CameraAction_CAMERA_ACTION_START_VIDEO:
                return mavsdk::MissionServer::MissionItem::CameraAction::StartVideo;
            case rpc::mission_server::MissionItem_CameraAction_CAMERA_ACTION_STOP_VIDEO:
                return mavsdk::MissionServer::MissionItem::CameraAction::StopVideo;
        }
    }

    static std::unique_ptr<rpc::mission_server::MissionItem>
    translateToRpcMissionItem(const mavsdk::MissionServer::MissionItem& mission_item)
    {
        auto rpc_obj = std::make_unique<rpc::mission_server::MissionItem>();

        rpc_obj->set_latitude_deg(mission_item.latitude_deg);

        rpc_obj->set_longitude_deg(mission_item.longitude_deg);

        rpc_obj->set_relative_altitude_m(mission_item.relative_altitude_m);

        rpc_obj->set_speed_m_s(mission_item.speed_m_s);

        rpc_obj->set_is_fly_through(mission_item.is_fly_through);

        rpc_obj->set_gimbal_pitch_deg(mission_item.gimbal_pitch_deg);

        rpc_obj->set_gimbal_yaw_deg(mission_item.gimbal_yaw_deg);

        rpc_obj->set_camera_action(translateToRpcCameraAction(mission_item.camera_action));

        rpc_obj->set_loiter_time_s(mission_item.loiter_time_s);

        rpc_obj->set_camera_photo_interval_s(mission_item.camera_photo_interval_s);

        rpc_obj->set_acceptance_radius_m(mission_item.acceptance_radius_m);

        return rpc_obj;
    }

    static mavsdk::MissionServer::MissionItem
    translateFromRpcMissionItem(const rpc::mission_server::MissionItem& mission_item)
    {
        mavsdk::MissionServer::MissionItem obj;

        obj.latitude_deg = mission_item.latitude_deg();

        obj.longitude_deg = mission_item.longitude_deg();

        obj.relative_altitude_m = mission_item.relative_altitude_m();

        obj.speed_m_s = mission_item.speed_m_s();

        obj.is_fly_through = mission_item.is_fly_through();

        obj.gimbal_pitch_deg = mission_item.gimbal_pitch_deg();

        obj.gimbal_yaw_deg = mission_item.gimbal_yaw_deg();

        obj.camera_action = translateFromRpcCameraAction(mission_item.camera_action());

        obj.loiter_time_s = mission_item.loiter_time_s();

        obj.camera_photo_interval_s = mission_item.camera_photo_interval_s();

        obj.acceptance_radius_m = mission_item.acceptance_radius_m();

        return obj;
    }

    static std::unique_ptr<rpc::mission_server::MissionPlan>
    translateToRpcMissionPlan(const mavsdk::MissionServer::MissionPlan& mission_plan)
    {
        auto rpc_obj = std::make_unique<rpc::mission_server::MissionPlan>();

        for (const auto& elem : mission_plan.mission_items) {
            auto* ptr = rpc_obj->add_mission_items();
            ptr->CopyFrom(*translateToRpcMissionItem(elem).release());
        }

        return rpc_obj;
    }

    static mavsdk::MissionServer::MissionPlan
    translateFromRpcMissionPlan(const rpc::mission_server::MissionPlan& mission_plan)
    {
        mavsdk::MissionServer::MissionPlan obj;

        for (const auto& elem : mission_plan.mission_items()) {
            obj.mission_items.push_back(translateFromRpcMissionItem(
                static_cast<mavsdk::rpc::mission_server::MissionItem>(elem)));
        }

        return obj;
    }

    static std::unique_ptr<rpc::mission_server::MissionProgress>
    translateToRpcMissionProgress(const mavsdk::MissionServer::MissionProgress& mission_progress)
    {
        auto rpc_obj = std::make_unique<rpc::mission_server::MissionProgress>();

        rpc_obj->set_current(mission_progress.current);

        rpc_obj->set_total(mission_progress.total);

        return rpc_obj;
    }

    static mavsdk::MissionServer::MissionProgress
    translateFromRpcMissionProgress(const rpc::mission_server::MissionProgress& mission_progress)
    {
        mavsdk::MissionServer::MissionProgress obj;

        obj.current = mission_progress.current();

        obj.total = mission_progress.total();

        return obj;
    }

    static rpc::mission_server::MissionResult::Result
    translateToRpcResult(const mavsdk::MissionServer::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::MissionServer::Result::Unknown:
                return rpc::mission_server::MissionResult_Result_RESULT_UNKNOWN;
            case mavsdk::MissionServer::Result::Success:
                return rpc::mission_server::MissionResult_Result_RESULT_SUCCESS;
            case mavsdk::MissionServer::Result::Error:
                return rpc::mission_server::MissionResult_Result_RESULT_ERROR;
            case mavsdk::MissionServer::Result::TooManyMissionItems:
                return rpc::mission_server::MissionResult_Result_RESULT_TOO_MANY_MISSION_ITEMS;
            case mavsdk::MissionServer::Result::Busy:
                return rpc::mission_server::MissionResult_Result_RESULT_BUSY;
            case mavsdk::MissionServer::Result::Timeout:
                return rpc::mission_server::MissionResult_Result_RESULT_TIMEOUT;
            case mavsdk::MissionServer::Result::InvalidArgument:
                return rpc::mission_server::MissionResult_Result_RESULT_INVALID_ARGUMENT;
            case mavsdk::MissionServer::Result::Unsupported:
                return rpc::mission_server::MissionResult_Result_RESULT_UNSUPPORTED;
            case mavsdk::MissionServer::Result::NoMissionAvailable:
                return rpc::mission_server::MissionResult_Result_RESULT_NO_MISSION_AVAILABLE;
            case mavsdk::MissionServer::Result::UnsupportedMissionCmd:
                return rpc::mission_server::MissionResult_Result_RESULT_UNSUPPORTED_MISSION_CMD;
            case mavsdk::MissionServer::Result::TransferCancelled:
                return rpc::mission_server::MissionResult_Result_RESULT_TRANSFER_CANCELLED;
            case mavsdk::MissionServer::Result::NoSystem:
                return rpc::mission_server::MissionResult_Result_RESULT_NO_SYSTEM;
        }
    }

    static mavsdk::MissionServer::Result
    translateFromRpcResult(const rpc::mission_server::MissionResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::mission_server::MissionResult_Result_RESULT_UNKNOWN:
                return mavsdk::MissionServer::Result::Unknown;
            case rpc::mission_server::MissionResult_Result_RESULT_SUCCESS:
                return mavsdk::MissionServer::Result::Success;
            case rpc::mission_server::MissionResult_Result_RESULT_ERROR:
                return mavsdk::MissionServer::Result::Error;
            case rpc::mission_server::MissionResult_Result_RESULT_TOO_MANY_MISSION_ITEMS:
                return mavsdk::MissionServer::Result::TooManyMissionItems;
            case rpc::mission_server::MissionResult_Result_RESULT_BUSY:
                return mavsdk::MissionServer::Result::Busy;
            case rpc::mission_server::MissionResult_Result_RESULT_TIMEOUT:
                return mavsdk::MissionServer::Result::Timeout;
            case rpc::mission_server::MissionResult_Result_RESULT_INVALID_ARGUMENT:
                return mavsdk::MissionServer::Result::InvalidArgument;
            case rpc::mission_server::MissionResult_Result_RESULT_UNSUPPORTED:
                return mavsdk::MissionServer::Result::Unsupported;
            case rpc::mission_server::MissionResult_Result_RESULT_NO_MISSION_AVAILABLE:
                return mavsdk::MissionServer::Result::NoMissionAvailable;
            case rpc::mission_server::MissionResult_Result_RESULT_UNSUPPORTED_MISSION_CMD:
                return mavsdk::MissionServer::Result::UnsupportedMissionCmd;
            case rpc::mission_server::MissionResult_Result_RESULT_TRANSFER_CANCELLED:
                return mavsdk::MissionServer::Result::TransferCancelled;
            case rpc::mission_server::MissionResult_Result_RESULT_NO_SYSTEM:
                return mavsdk::MissionServer::Result::NoSystem;
        }
    }

    grpc::Status SubscribeIncomingMission(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest* /* request */,
        grpc::ServerWriter<rpc::mission_server::IncomingMissionResponse>* writer) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            rpc::mission_server::IncomingMissionResponse rpc_response;
            auto result = mavsdk::MissionServer::Result::NoSystem;
            fillResponseWithResult(&rpc_response, result);
            writer->Write(rpc_response);

            return grpc::Status::OK;
        }

        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);
        auto subscribe_mutex = std::make_shared<std::mutex>();

        _lazy_plugin.maybe_plugin()->subscribe_incoming_mission(
            [this, &writer, &stream_closed_promise, is_finished, subscribe_mutex](
                mavsdk::MissionServer::Result result,
                const mavsdk::MissionServer::MissionPlan incoming_mission) {
                rpc::mission_server::IncomingMissionResponse rpc_response;

                rpc_response.set_allocated_mission_plan(
                    translateToRpcMissionPlan(incoming_mission).release());

                auto rpc_result = translateToRpcResult(result);
                auto* rpc_mission_server_result = new rpc::mission_server::MissionServerResult();
                rpc_mission_server_result->set_result(rpc_result);
                std::stringstream ss;
                ss << result;
                rpc_mission_server_result->set_result_str(ss.str());
                rpc_response.set_allocated_mission_server_result(rpc_mission_server_result);

                std::unique_lock<std::mutex> lock(*subscribe_mutex);
                if (!*is_finished && !writer->Write(rpc_response)) {
                    _lazy_plugin.maybe_plugin()->subscribe_incoming_mission(nullptr);

                    *is_finished = true;
                    unregister_stream_stop_promise(stream_closed_promise);
                    stream_closed_promise->set_value();
                }
            });

        stream_closed_future.wait();
        std::unique_lock<std::mutex> lock(*subscribe_mutex);
        *is_finished = true;

        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    LazyPlugin& _lazy_plugin;
    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk