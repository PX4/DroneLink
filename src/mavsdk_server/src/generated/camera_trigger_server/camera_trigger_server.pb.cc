// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_trigger_server/camera_trigger_server.proto

#include "camera_trigger_server/camera_trigger_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mavsdk {
namespace rpc {
namespace camera_trigger_server {
constexpr SubscribeCaptureRequest::SubscribeCaptureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeCaptureRequestDefaultTypeInternal {
  constexpr SubscribeCaptureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeCaptureRequestDefaultTypeInternal() {}
  union {
    SubscribeCaptureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeCaptureRequestDefaultTypeInternal _SubscribeCaptureRequest_default_instance_;
constexpr CaptureResponse::CaptureResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : camera_trigger_server_result_(nullptr)
  , sequence_number_(0u){}
struct CaptureResponseDefaultTypeInternal {
  constexpr CaptureResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CaptureResponseDefaultTypeInternal() {}
  union {
    CaptureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CaptureResponseDefaultTypeInternal _CaptureResponse_default_instance_;
constexpr CameraTriggerServerResult::CameraTriggerServerResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct CameraTriggerServerResultDefaultTypeInternal {
  constexpr CameraTriggerServerResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraTriggerServerResultDefaultTypeInternal() {}
  union {
    CameraTriggerServerResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraTriggerServerResultDefaultTypeInternal _CameraTriggerServerResult_default_instance_;
}  // namespace camera_trigger_server
}  // namespace rpc
}  // namespace mavsdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera_trigger_server::SubscribeCaptureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera_trigger_server::CaptureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera_trigger_server::CaptureResponse, camera_trigger_server_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera_trigger_server::CaptureResponse, sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::camera_trigger_server::SubscribeCaptureRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::camera_trigger_server::CaptureResponse)},
  { 12, -1, sizeof(::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::camera_trigger_server::_SubscribeCaptureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::camera_trigger_server::_CaptureResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::camera_trigger_server::_CameraTriggerServerResult_default_instance_),
};

const char descriptor_table_protodef_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1camera_trigger_server/camera_trigger_s"
  "erver.proto\022 mavsdk.rpc.camera_trigger_s"
  "erver\032\024mavsdk_options.proto\"\031\n\027Subscribe"
  "CaptureRequest\"\215\001\n\017CaptureResponse\022a\n\034ca"
  "mera_trigger_server_result\030\001 \001(\0132;.mavsd"
  "k.rpc.camera_trigger_server.CameraTrigge"
  "rServerResult\022\027\n\017sequence_number\030\002 \001(\r\"\301"
  "\002\n\031CameraTriggerServerResult\022R\n\006result\030\001"
  " \001(\0162B.mavsdk.rpc.camera_trigger_server."
  "CameraTriggerServerResult.Result\022\022\n\nresu"
  "lt_str\030\002 \001(\t\"\273\001\n\006Result\022\022\n\016RESULT_UNKNOW"
  "N\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\024\n\020RESULT_NO_SYS"
  "TEM\020\002\022\033\n\027RESULT_CONNECTION_ERROR\020\003\022\017\n\013RE"
  "SULT_BUSY\020\004\022\031\n\025RESULT_COMMAND_DENIED\020\005\022\022"
  "\n\016RESULT_TIMEOUT\020\006\022\026\n\022RESULT_UNSUPPORTED"
  "\020\0072\247\001\n\032CameraTriggerServerService\022\210\001\n\020Su"
  "bscribeCapture\0229.mavsdk.rpc.camera_trigg"
  "er_server.SubscribeCaptureRequest\0321.mavs"
  "dk.rpc.camera_trigger_server.CaptureResp"
  "onse\"\004\200\265\030\0000\001B;\n\037io.mavsdk.camera_trigger"
  "_serverB\030CameraTriggerServerProtob\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto = {
  false, false, 841, descriptor_table_protodef_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto, "camera_trigger_server/camera_trigger_server.proto", 
  &descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto_once, descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto::offsets,
  file_level_metadata_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto, file_level_enum_descriptors_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto, file_level_service_descriptors_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto_getter() {
  return &descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto(&descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto);
namespace mavsdk {
namespace rpc {
namespace camera_trigger_server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraTriggerServerResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto);
  return file_level_enum_descriptors_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto[0];
}
bool CameraTriggerServerResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraTriggerServerResult_Result CameraTriggerServerResult::RESULT_UNKNOWN;
constexpr CameraTriggerServerResult_Result CameraTriggerServerResult::RESULT_SUCCESS;
constexpr CameraTriggerServerResult_Result CameraTriggerServerResult::RESULT_NO_SYSTEM;
constexpr CameraTriggerServerResult_Result CameraTriggerServerResult::RESULT_CONNECTION_ERROR;
constexpr CameraTriggerServerResult_Result CameraTriggerServerResult::RESULT_BUSY;
constexpr CameraTriggerServerResult_Result CameraTriggerServerResult::RESULT_COMMAND_DENIED;
constexpr CameraTriggerServerResult_Result CameraTriggerServerResult::RESULT_TIMEOUT;
constexpr CameraTriggerServerResult_Result CameraTriggerServerResult::RESULT_UNSUPPORTED;
constexpr CameraTriggerServerResult_Result CameraTriggerServerResult::Result_MIN;
constexpr CameraTriggerServerResult_Result CameraTriggerServerResult::Result_MAX;
constexpr int CameraTriggerServerResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SubscribeCaptureRequest::_Internal {
 public:
};

SubscribeCaptureRequest::SubscribeCaptureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.camera_trigger_server.SubscribeCaptureRequest)
}
SubscribeCaptureRequest::SubscribeCaptureRequest(const SubscribeCaptureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera_trigger_server.SubscribeCaptureRequest)
}

inline void SubscribeCaptureRequest::SharedCtor() {
}

SubscribeCaptureRequest::~SubscribeCaptureRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera_trigger_server.SubscribeCaptureRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribeCaptureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscribeCaptureRequest::ArenaDtor(void* object) {
  SubscribeCaptureRequest* _this = reinterpret_cast< SubscribeCaptureRequest* >(object);
  (void)_this;
}
void SubscribeCaptureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeCaptureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeCaptureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera_trigger_server.SubscribeCaptureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeCaptureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeCaptureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera_trigger_server.SubscribeCaptureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera_trigger_server.SubscribeCaptureRequest)
  return target;
}

size_t SubscribeCaptureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera_trigger_server.SubscribeCaptureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeCaptureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribeCaptureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeCaptureRequest::GetClassData() const { return &_class_data_; }

void SubscribeCaptureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SubscribeCaptureRequest *>(to)->MergeFrom(
      static_cast<const SubscribeCaptureRequest &>(from));
}


void SubscribeCaptureRequest::MergeFrom(const SubscribeCaptureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera_trigger_server.SubscribeCaptureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeCaptureRequest::CopyFrom(const SubscribeCaptureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera_trigger_server.SubscribeCaptureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCaptureRequest::IsInitialized() const {
  return true;
}

void SubscribeCaptureRequest::InternalSwap(SubscribeCaptureRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeCaptureRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto_getter, &descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto_once,
      file_level_metadata_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto[0]);
}

// ===================================================================

class CaptureResponse::_Internal {
 public:
  static const ::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult& camera_trigger_server_result(const CaptureResponse* msg);
};

const ::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult&
CaptureResponse::_Internal::camera_trigger_server_result(const CaptureResponse* msg) {
  return *msg->camera_trigger_server_result_;
}
CaptureResponse::CaptureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.camera_trigger_server.CaptureResponse)
}
CaptureResponse::CaptureResponse(const CaptureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_camera_trigger_server_result()) {
    camera_trigger_server_result_ = new ::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult(*from.camera_trigger_server_result_);
  } else {
    camera_trigger_server_result_ = nullptr;
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera_trigger_server.CaptureResponse)
}

inline void CaptureResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&camera_trigger_server_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&camera_trigger_server_result_)) + sizeof(sequence_number_));
}

CaptureResponse::~CaptureResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera_trigger_server.CaptureResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CaptureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete camera_trigger_server_result_;
}

void CaptureResponse::ArenaDtor(void* object) {
  CaptureResponse* _this = reinterpret_cast< CaptureResponse* >(object);
  (void)_this;
}
void CaptureResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CaptureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CaptureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera_trigger_server.CaptureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && camera_trigger_server_result_ != nullptr) {
    delete camera_trigger_server_result_;
  }
  camera_trigger_server_result_ = nullptr;
  sequence_number_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CaptureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult camera_trigger_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_trigger_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CaptureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera_trigger_server.CaptureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult camera_trigger_server_result = 1;
  if (this->_internal_has_camera_trigger_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::camera_trigger_server_result(this), target, stream);
  }

  // uint32 sequence_number = 2;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera_trigger_server.CaptureResponse)
  return target;
}

size_t CaptureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera_trigger_server.CaptureResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult camera_trigger_server_result = 1;
  if (this->_internal_has_camera_trigger_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_trigger_server_result_);
  }

  // uint32 sequence_number = 2;
  if (this->_internal_sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CaptureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CaptureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CaptureResponse::GetClassData() const { return &_class_data_; }

void CaptureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CaptureResponse *>(to)->MergeFrom(
      static_cast<const CaptureResponse &>(from));
}


void CaptureResponse::MergeFrom(const CaptureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera_trigger_server.CaptureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_camera_trigger_server_result()) {
    _internal_mutable_camera_trigger_server_result()->::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult::MergeFrom(from._internal_camera_trigger_server_result());
  }
  if (from._internal_sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CaptureResponse::CopyFrom(const CaptureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera_trigger_server.CaptureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureResponse::IsInitialized() const {
  return true;
}

void CaptureResponse::InternalSwap(CaptureResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptureResponse, sequence_number_)
      + sizeof(CaptureResponse::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(CaptureResponse, camera_trigger_server_result_)>(
          reinterpret_cast<char*>(&camera_trigger_server_result_),
          reinterpret_cast<char*>(&other->camera_trigger_server_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CaptureResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto_getter, &descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto_once,
      file_level_metadata_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto[1]);
}

// ===================================================================

class CameraTriggerServerResult::_Internal {
 public:
};

CameraTriggerServerResult::CameraTriggerServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult)
}
CameraTriggerServerResult::CameraTriggerServerResult(const CameraTriggerServerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_str(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult)
}

inline void CameraTriggerServerResult::SharedCtor() {
result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

CameraTriggerServerResult::~CameraTriggerServerResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraTriggerServerResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CameraTriggerServerResult::ArenaDtor(void* object) {
  CameraTriggerServerResult* _this = reinterpret_cast< CameraTriggerServerResult* >(object);
  (void)_this;
}
void CameraTriggerServerResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraTriggerServerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraTriggerServerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraTriggerServerResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraTriggerServerResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult)
  return target;
}

size_t CameraTriggerServerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraTriggerServerResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraTriggerServerResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraTriggerServerResult::GetClassData() const { return &_class_data_; }

void CameraTriggerServerResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CameraTriggerServerResult *>(to)->MergeFrom(
      static_cast<const CameraTriggerServerResult &>(from));
}


void CameraTriggerServerResult::MergeFrom(const CameraTriggerServerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraTriggerServerResult::CopyFrom(const CameraTriggerServerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera_trigger_server.CameraTriggerServerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraTriggerServerResult::IsInitialized() const {
  return true;
}

void CameraTriggerServerResult::InternalSwap(CameraTriggerServerResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_str_, GetArenaForAllocation(),
      &other->result_str_, other->GetArenaForAllocation()
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraTriggerServerResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto_getter, &descriptor_table_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto_once,
      file_level_metadata_camera_5ftrigger_5fserver_2fcamera_5ftrigger_5fserver_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace camera_trigger_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera_trigger_server::SubscribeCaptureRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera_trigger_server::SubscribeCaptureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::camera_trigger_server::SubscribeCaptureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera_trigger_server::CaptureResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera_trigger_server::CaptureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::camera_trigger_server::CaptureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::camera_trigger_server::CameraTriggerServerResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
