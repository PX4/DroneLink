// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mission_server/mission_server.proto

#include "mission_server/mission_server.pb.h"
#include "mission_server/mission_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace mission_server {

static const char* MissionService_method_names[] = {
  "/mavsdk.rpc.mission_server.MissionService/SubscribeIncomingMission",
};

std::unique_ptr< MissionService::Stub> MissionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MissionService::Stub> stub(new MissionService::Stub(channel));
  return stub;
}

MissionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SubscribeIncomingMission_(MissionService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::mavsdk::rpc::mission_server::IncomingMissionResponse>* MissionService::Stub::SubscribeIncomingMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::mission_server::IncomingMissionResponse>::Create(channel_.get(), rpcmethod_SubscribeIncomingMission_, context, request);
}

void MissionService::Stub::experimental_async::SubscribeIncomingMission(::grpc::ClientContext* context, ::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::mission_server::IncomingMissionResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::mission_server::IncomingMissionResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeIncomingMission_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_server::IncomingMissionResponse>* MissionService::Stub::AsyncSubscribeIncomingMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_server::IncomingMissionResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeIncomingMission_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_server::IncomingMissionResponse>* MissionService::Stub::PrepareAsyncSubscribeIncomingMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_server::IncomingMissionResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeIncomingMission_, context, request, false, nullptr);
}

MissionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MissionService::Service, ::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest, ::mavsdk::rpc::mission_server::IncomingMissionResponse>(
          [](MissionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::mission_server::IncomingMissionResponse>* writer) {
               return service->SubscribeIncomingMission(ctx, req, writer);
             }, this)));
}

MissionService::Service::~Service() {
}

::grpc::Status MissionService::Service::SubscribeIncomingMission(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::mission_server::IncomingMissionResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace mission_server

