// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mission_server/mission_server.proto

#include "mission_server/mission_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mavsdk {
namespace rpc {
namespace mission_server {
constexpr SubscribeIncomingMissionRequest::SubscribeIncomingMissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeIncomingMissionRequestDefaultTypeInternal {
  constexpr SubscribeIncomingMissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeIncomingMissionRequestDefaultTypeInternal() {}
  union {
    SubscribeIncomingMissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeIncomingMissionRequestDefaultTypeInternal _SubscribeIncomingMissionRequest_default_instance_;
constexpr IncomingMissionResponse::IncomingMissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mission_result_(nullptr)
  , mission_plan_(nullptr){}
struct IncomingMissionResponseDefaultTypeInternal {
  constexpr IncomingMissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncomingMissionResponseDefaultTypeInternal() {}
  union {
    IncomingMissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncomingMissionResponseDefaultTypeInternal _IncomingMissionResponse_default_instance_;
constexpr MissionItem::MissionItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_deg_(0)
  , longitude_deg_(0)
  , relative_altitude_m_(0)
  , speed_m_s_(0)
  , is_fly_through_(false)
  , gimbal_pitch_deg_(0)
  , gimbal_yaw_deg_(0)
  , camera_action_(0)

  , camera_photo_interval_s_(0)
  , loiter_time_s_(0)
  , acceptance_radius_m_(0){}
struct MissionItemDefaultTypeInternal {
  constexpr MissionItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MissionItemDefaultTypeInternal() {}
  union {
    MissionItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MissionItemDefaultTypeInternal _MissionItem_default_instance_;
constexpr MissionPlan::MissionPlan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mission_items_(){}
struct MissionPlanDefaultTypeInternal {
  constexpr MissionPlanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MissionPlanDefaultTypeInternal() {}
  union {
    MissionPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MissionPlanDefaultTypeInternal _MissionPlan_default_instance_;
constexpr MissionProgress::MissionProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_(0)
  , total_(0){}
struct MissionProgressDefaultTypeInternal {
  constexpr MissionProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MissionProgressDefaultTypeInternal() {}
  union {
    MissionProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MissionProgressDefaultTypeInternal _MissionProgress_default_instance_;
constexpr MissionResult::MissionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct MissionResultDefaultTypeInternal {
  constexpr MissionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MissionResultDefaultTypeInternal() {}
  union {
    MissionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MissionResultDefaultTypeInternal _MissionResult_default_instance_;
}  // namespace mission_server
}  // namespace rpc
}  // namespace mavsdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mission_5fserver_2fmission_5fserver_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mission_5fserver_2fmission_5fserver_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mission_5fserver_2fmission_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mission_5fserver_2fmission_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::IncomingMissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::IncomingMissionResponse, mission_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::IncomingMissionResponse, mission_plan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, relative_altitude_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, speed_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, is_fly_through_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, gimbal_pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, gimbal_yaw_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, camera_action_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, loiter_time_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, camera_photo_interval_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionItem, acceptance_radius_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionPlan, mission_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionProgress, current_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionProgress, total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::mission_server::MissionResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::mission_server::IncomingMissionResponse)},
  { 12, -1, sizeof(::mavsdk::rpc::mission_server::MissionItem)},
  { 28, -1, sizeof(::mavsdk::rpc::mission_server::MissionPlan)},
  { 34, -1, sizeof(::mavsdk::rpc::mission_server::MissionProgress)},
  { 41, -1, sizeof(::mavsdk::rpc::mission_server::MissionResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mission_server::_SubscribeIncomingMissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mission_server::_IncomingMissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mission_server::_MissionItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mission_server::_MissionPlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mission_server::_MissionProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::mission_server::_MissionResult_default_instance_),
};

const char descriptor_table_protodef_mission_5fserver_2fmission_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#mission_server/mission_server.proto\022\031m"
  "avsdk.rpc.mission_server\032\024mavsdk_options"
  ".proto\"!\n\037SubscribeIncomingMissionReques"
  "t\"\231\001\n\027IncomingMissionResponse\022@\n\016mission"
  "_result\030\001 \001(\0132(.mavsdk.rpc.mission_serve"
  "r.MissionResult\022<\n\014mission_plan\030\002 \001(\0132&."
  "mavsdk.rpc.mission_server.MissionPlan\"\260\005"
  "\n\013MissionItem\022(\n\014latitude_deg\030\001 \001(\001B\022\202\265\030"
  "\003NaN\211\265\030H\257\274\232\362\327z>\022)\n\rlongitude_deg\030\002 \001(\001B\022"
  "\202\265\030\003NaN\211\265\030H\257\274\232\362\327z>\022$\n\023relative_altitude_"
  "m\030\003 \001(\002B\007\202\265\030\003NaN\022\032\n\tspeed_m_s\030\004 \001(\002B\007\202\265\030"
  "\003NaN\022!\n\016is_fly_through\030\005 \001(\010B\t\202\265\030\005false\022"
  ",\n\020gimbal_pitch_deg\030\006 \001(\002B\022\202\265\030\003NaN\211\265\030-C\034"
  "\353\3426\032\?\022*\n\016gimbal_yaw_deg\030\007 \001(\002B\022\202\265\030\003NaN\211\265"
  "\030-C\034\353\3426\032\?\022J\n\rcamera_action\030\010 \001(\01623.mavsd"
  "k.rpc.mission_server.MissionItem.CameraA"
  "ction\022\036\n\rloiter_time_s\030\t \001(\002B\007\202\265\030\003NaN\022(\n"
  "\027camera_photo_interval_s\030\n \001(\001B\007\202\265\030\0031.0\022"
  "$\n\023acceptance_radius_m\030\013 \001(\002B\007\202\265\030\003NaN\"\320\001"
  "\n\014CameraAction\022\026\n\022CAMERA_ACTION_NONE\020\000\022\034"
  "\n\030CAMERA_ACTION_TAKE_PHOTO\020\001\022&\n\"CAMERA_A"
  "CTION_START_PHOTO_INTERVAL\020\002\022%\n!CAMERA_A"
  "CTION_STOP_PHOTO_INTERVAL\020\003\022\035\n\031CAMERA_AC"
  "TION_START_VIDEO\020\004\022\034\n\030CAMERA_ACTION_STOP"
  "_VIDEO\020\005\"L\n\013MissionPlan\022=\n\rmission_items"
  "\030\001 \003(\0132&.mavsdk.rpc.mission_server.Missi"
  "onItem\"1\n\017MissionProgress\022\017\n\007current\030\001 \001"
  "(\005\022\r\n\005total\030\002 \001(\005\"\240\003\n\rMissionResult\022\?\n\006r"
  "esult\030\001 \001(\0162/.mavsdk.rpc.mission_server."
  "MissionResult.Result\022\022\n\nresult_str\030\002 \001(\t"
  "\"\271\002\n\006Result\022\022\n\016RESULT_UNKNOWN\020\000\022\022\n\016RESUL"
  "T_SUCCESS\020\001\022\020\n\014RESULT_ERROR\020\002\022!\n\035RESULT_"
  "TOO_MANY_MISSION_ITEMS\020\003\022\017\n\013RESULT_BUSY\020"
  "\004\022\022\n\016RESULT_TIMEOUT\020\005\022\033\n\027RESULT_INVALID_"
  "ARGUMENT\020\006\022\026\n\022RESULT_UNSUPPORTED\020\007\022\037\n\033RE"
  "SULT_NO_MISSION_AVAILABLE\020\010\022\"\n\036RESULT_UN"
  "SUPPORTED_MISSION_CMD\020\013\022\035\n\031RESULT_TRANSF"
  "ER_CANCELLED\020\014\022\024\n\020RESULT_NO_SYSTEM\020\r2\241\001\n"
  "\016MissionService\022\216\001\n\030SubscribeIncomingMis"
  "sion\022:.mavsdk.rpc.mission_server.Subscri"
  "beIncomingMissionRequest\0322.mavsdk.rpc.mi"
  "ssion_server.IncomingMissionResponse\"\0000\001"
  "B.\n\030io.mavsdk.mission_serverB\022MissionSer"
  "verProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mission_5fserver_2fmission_5fserver_2eproto = {
  false, false, 1736, descriptor_table_protodef_mission_5fserver_2fmission_5fserver_2eproto, "mission_server/mission_server.proto", 
  &descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_once, descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_mission_5fserver_2fmission_5fserver_2eproto::offsets,
  file_level_metadata_mission_5fserver_2fmission_5fserver_2eproto, file_level_enum_descriptors_mission_5fserver_2fmission_5fserver_2eproto, file_level_service_descriptors_mission_5fserver_2fmission_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mission_5fserver_2fmission_5fserver_2eproto);
  return descriptor_table_mission_5fserver_2fmission_5fserver_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mission_5fserver_2fmission_5fserver_2eproto(&descriptor_table_mission_5fserver_2fmission_5fserver_2eproto);
namespace mavsdk {
namespace rpc {
namespace mission_server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionItem_CameraAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mission_5fserver_2fmission_5fserver_2eproto);
  return file_level_enum_descriptors_mission_5fserver_2fmission_5fserver_2eproto[0];
}
bool MissionItem_CameraAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MissionItem_CameraAction MissionItem::CAMERA_ACTION_NONE;
constexpr MissionItem_CameraAction MissionItem::CAMERA_ACTION_TAKE_PHOTO;
constexpr MissionItem_CameraAction MissionItem::CAMERA_ACTION_START_PHOTO_INTERVAL;
constexpr MissionItem_CameraAction MissionItem::CAMERA_ACTION_STOP_PHOTO_INTERVAL;
constexpr MissionItem_CameraAction MissionItem::CAMERA_ACTION_START_VIDEO;
constexpr MissionItem_CameraAction MissionItem::CAMERA_ACTION_STOP_VIDEO;
constexpr MissionItem_CameraAction MissionItem::CameraAction_MIN;
constexpr MissionItem_CameraAction MissionItem::CameraAction_MAX;
constexpr int MissionItem::CameraAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mission_5fserver_2fmission_5fserver_2eproto);
  return file_level_enum_descriptors_mission_5fserver_2fmission_5fserver_2eproto[1];
}
bool MissionResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MissionResult_Result MissionResult::RESULT_UNKNOWN;
constexpr MissionResult_Result MissionResult::RESULT_SUCCESS;
constexpr MissionResult_Result MissionResult::RESULT_ERROR;
constexpr MissionResult_Result MissionResult::RESULT_TOO_MANY_MISSION_ITEMS;
constexpr MissionResult_Result MissionResult::RESULT_BUSY;
constexpr MissionResult_Result MissionResult::RESULT_TIMEOUT;
constexpr MissionResult_Result MissionResult::RESULT_INVALID_ARGUMENT;
constexpr MissionResult_Result MissionResult::RESULT_UNSUPPORTED;
constexpr MissionResult_Result MissionResult::RESULT_NO_MISSION_AVAILABLE;
constexpr MissionResult_Result MissionResult::RESULT_UNSUPPORTED_MISSION_CMD;
constexpr MissionResult_Result MissionResult::RESULT_TRANSFER_CANCELLED;
constexpr MissionResult_Result MissionResult::RESULT_NO_SYSTEM;
constexpr MissionResult_Result MissionResult::Result_MIN;
constexpr MissionResult_Result MissionResult::Result_MAX;
constexpr int MissionResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SubscribeIncomingMissionRequest::_Internal {
 public:
};

SubscribeIncomingMissionRequest::SubscribeIncomingMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
}
SubscribeIncomingMissionRequest::SubscribeIncomingMissionRequest(const SubscribeIncomingMissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
}

void SubscribeIncomingMissionRequest::SharedCtor() {
}

SubscribeIncomingMissionRequest::~SubscribeIncomingMissionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeIncomingMissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeIncomingMissionRequest::ArenaDtor(void* object) {
  SubscribeIncomingMissionRequest* _this = reinterpret_cast< SubscribeIncomingMissionRequest* >(object);
  (void)_this;
}
void SubscribeIncomingMissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeIncomingMissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeIncomingMissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeIncomingMissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeIncomingMissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
  return target;
}

size_t SubscribeIncomingMissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeIncomingMissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeIncomingMissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeIncomingMissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
    MergeFrom(*source);
  }
}

void SubscribeIncomingMissionRequest::MergeFrom(const SubscribeIncomingMissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeIncomingMissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeIncomingMissionRequest::CopyFrom(const SubscribeIncomingMissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeIncomingMissionRequest::IsInitialized() const {
  return true;
}

void SubscribeIncomingMissionRequest::InternalSwap(SubscribeIncomingMissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeIncomingMissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IncomingMissionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::mission_server::MissionResult& mission_result(const IncomingMissionResponse* msg);
  static const ::mavsdk::rpc::mission_server::MissionPlan& mission_plan(const IncomingMissionResponse* msg);
};

const ::mavsdk::rpc::mission_server::MissionResult&
IncomingMissionResponse::_Internal::mission_result(const IncomingMissionResponse* msg) {
  return *msg->mission_result_;
}
const ::mavsdk::rpc::mission_server::MissionPlan&
IncomingMissionResponse::_Internal::mission_plan(const IncomingMissionResponse* msg) {
  return *msg->mission_plan_;
}
IncomingMissionResponse::IncomingMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mission_server.IncomingMissionResponse)
}
IncomingMissionResponse::IncomingMissionResponse(const IncomingMissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mission_result()) {
    mission_result_ = new ::mavsdk::rpc::mission_server::MissionResult(*from.mission_result_);
  } else {
    mission_result_ = nullptr;
  }
  if (from._internal_has_mission_plan()) {
    mission_plan_ = new ::mavsdk::rpc::mission_server::MissionPlan(*from.mission_plan_);
  } else {
    mission_plan_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mission_server.IncomingMissionResponse)
}

void IncomingMissionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mission_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mission_plan_) -
    reinterpret_cast<char*>(&mission_result_)) + sizeof(mission_plan_));
}

IncomingMissionResponse::~IncomingMissionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mission_server.IncomingMissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IncomingMissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mission_result_;
  if (this != internal_default_instance()) delete mission_plan_;
}

void IncomingMissionResponse::ArenaDtor(void* object) {
  IncomingMissionResponse* _this = reinterpret_cast< IncomingMissionResponse* >(object);
  (void)_this;
}
void IncomingMissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncomingMissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncomingMissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mission_server.IncomingMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
  if (GetArena() == nullptr && mission_plan_ != nullptr) {
    delete mission_plan_;
  }
  mission_plan_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncomingMissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.mission_server.MissionResult mission_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mission_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mission_server.MissionPlan mission_plan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mission_plan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncomingMissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mission_server.IncomingMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mission_server.MissionResult mission_result = 1;
  if (this->has_mission_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mission_result(this), target, stream);
  }

  // .mavsdk.rpc.mission_server.MissionPlan mission_plan = 2;
  if (this->has_mission_plan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mission_plan(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mission_server.IncomingMissionResponse)
  return target;
}

size_t IncomingMissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mission_server.IncomingMissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.mission_server.MissionResult mission_result = 1;
  if (this->has_mission_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mission_result_);
  }

  // .mavsdk.rpc.mission_server.MissionPlan mission_plan = 2;
  if (this->has_mission_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mission_plan_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncomingMissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.mission_server.IncomingMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IncomingMissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncomingMissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.mission_server.IncomingMissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.mission_server.IncomingMissionResponse)
    MergeFrom(*source);
  }
}

void IncomingMissionResponse::MergeFrom(const IncomingMissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mission_server.IncomingMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mission_result()) {
    _internal_mutable_mission_result()->::mavsdk::rpc::mission_server::MissionResult::MergeFrom(from._internal_mission_result());
  }
  if (from.has_mission_plan()) {
    _internal_mutable_mission_plan()->::mavsdk::rpc::mission_server::MissionPlan::MergeFrom(from._internal_mission_plan());
  }
}

void IncomingMissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.mission_server.IncomingMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncomingMissionResponse::CopyFrom(const IncomingMissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mission_server.IncomingMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingMissionResponse::IsInitialized() const {
  return true;
}

void IncomingMissionResponse::InternalSwap(IncomingMissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncomingMissionResponse, mission_plan_)
      + sizeof(IncomingMissionResponse::mission_plan_)
      - PROTOBUF_FIELD_OFFSET(IncomingMissionResponse, mission_result_)>(
          reinterpret_cast<char*>(&mission_result_),
          reinterpret_cast<char*>(&other->mission_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IncomingMissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MissionItem::_Internal {
 public:
};

MissionItem::MissionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mission_server.MissionItem)
}
MissionItem::MissionItem(const MissionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptance_radius_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(acceptance_radius_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mission_server.MissionItem)
}

void MissionItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acceptance_radius_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(acceptance_radius_m_));
}

MissionItem::~MissionItem() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mission_server.MissionItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MissionItem::ArenaDtor(void* object) {
  MissionItem* _this = reinterpret_cast< MissionItem* >(object);
  (void)_this;
}
void MissionItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MissionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mission_server.MissionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptance_radius_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(acceptance_radius_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float relative_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          relative_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          speed_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_fly_through = 5 [(.mavsdk.options.default_value) = "false"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_fly_through_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gimbal_pitch_deg = 6 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          gimbal_pitch_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gimbal_yaw_deg = 7 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          gimbal_yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.mission_server.MissionItem.CameraAction camera_action = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_camera_action(static_cast<::mavsdk::rpc::mission_server::MissionItem_CameraAction>(val));
        } else goto handle_unusual;
        continue;
      // float loiter_time_s = 9 [(.mavsdk.options.default_value) = "NaN"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          loiter_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double camera_photo_interval_s = 10 [(.mavsdk.options.default_value) = "1.0"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          camera_photo_interval_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float acceptance_radius_m = 11 [(.mavsdk.options.default_value) = "NaN"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          acceptance_radius_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mission_server.MissionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  // float relative_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->relative_altitude_m() <= 0 && this->relative_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_relative_altitude_m(), target);
  }

  // float speed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->speed_m_s() <= 0 && this->speed_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speed_m_s(), target);
  }

  // bool is_fly_through = 5 [(.mavsdk.options.default_value) = "false"];
  if (this->is_fly_through() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_fly_through(), target);
  }

  // float gimbal_pitch_deg = 6 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];
  if (!(this->gimbal_pitch_deg() <= 0 && this->gimbal_pitch_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_gimbal_pitch_deg(), target);
  }

  // float gimbal_yaw_deg = 7 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];
  if (!(this->gimbal_yaw_deg() <= 0 && this->gimbal_yaw_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_gimbal_yaw_deg(), target);
  }

  // .mavsdk.rpc.mission_server.MissionItem.CameraAction camera_action = 8;
  if (this->camera_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_camera_action(), target);
  }

  // float loiter_time_s = 9 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->loiter_time_s() <= 0 && this->loiter_time_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_loiter_time_s(), target);
  }

  // double camera_photo_interval_s = 10 [(.mavsdk.options.default_value) = "1.0"];
  if (!(this->camera_photo_interval_s() <= 0 && this->camera_photo_interval_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_camera_photo_interval_s(), target);
  }

  // float acceptance_radius_m = 11 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->acceptance_radius_m() <= 0 && this->acceptance_radius_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_acceptance_radius_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mission_server.MissionItem)
  return target;
}

size_t MissionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mission_server.MissionItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // float relative_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->relative_altitude_m() <= 0 && this->relative_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float speed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->speed_m_s() <= 0 && this->speed_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_fly_through = 5 [(.mavsdk.options.default_value) = "false"];
  if (this->is_fly_through() != 0) {
    total_size += 1 + 1;
  }

  // float gimbal_pitch_deg = 6 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];
  if (!(this->gimbal_pitch_deg() <= 0 && this->gimbal_pitch_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float gimbal_yaw_deg = 7 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];
  if (!(this->gimbal_yaw_deg() <= 0 && this->gimbal_yaw_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // .mavsdk.rpc.mission_server.MissionItem.CameraAction camera_action = 8;
  if (this->camera_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_camera_action());
  }

  // double camera_photo_interval_s = 10 [(.mavsdk.options.default_value) = "1.0"];
  if (!(this->camera_photo_interval_s() <= 0 && this->camera_photo_interval_s() >= 0)) {
    total_size += 1 + 8;
  }

  // float loiter_time_s = 9 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->loiter_time_s() <= 0 && this->loiter_time_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float acceptance_radius_m = 11 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->acceptance_radius_m() <= 0 && this->acceptance_radius_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.mission_server.MissionItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.mission_server.MissionItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.mission_server.MissionItem)
    MergeFrom(*source);
  }
}

void MissionItem::MergeFrom(const MissionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mission_server.MissionItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (!(from.relative_altitude_m() <= 0 && from.relative_altitude_m() >= 0)) {
    _internal_set_relative_altitude_m(from._internal_relative_altitude_m());
  }
  if (!(from.speed_m_s() <= 0 && from.speed_m_s() >= 0)) {
    _internal_set_speed_m_s(from._internal_speed_m_s());
  }
  if (from.is_fly_through() != 0) {
    _internal_set_is_fly_through(from._internal_is_fly_through());
  }
  if (!(from.gimbal_pitch_deg() <= 0 && from.gimbal_pitch_deg() >= 0)) {
    _internal_set_gimbal_pitch_deg(from._internal_gimbal_pitch_deg());
  }
  if (!(from.gimbal_yaw_deg() <= 0 && from.gimbal_yaw_deg() >= 0)) {
    _internal_set_gimbal_yaw_deg(from._internal_gimbal_yaw_deg());
  }
  if (from.camera_action() != 0) {
    _internal_set_camera_action(from._internal_camera_action());
  }
  if (!(from.camera_photo_interval_s() <= 0 && from.camera_photo_interval_s() >= 0)) {
    _internal_set_camera_photo_interval_s(from._internal_camera_photo_interval_s());
  }
  if (!(from.loiter_time_s() <= 0 && from.loiter_time_s() >= 0)) {
    _internal_set_loiter_time_s(from._internal_loiter_time_s());
  }
  if (!(from.acceptance_radius_m() <= 0 && from.acceptance_radius_m() >= 0)) {
    _internal_set_acceptance_radius_m(from._internal_acceptance_radius_m());
  }
}

void MissionItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.mission_server.MissionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionItem::CopyFrom(const MissionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mission_server.MissionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionItem::IsInitialized() const {
  return true;
}

void MissionItem::InternalSwap(MissionItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissionItem, acceptance_radius_m_)
      + sizeof(MissionItem::acceptance_radius_m_)
      - PROTOBUF_FIELD_OFFSET(MissionItem, latitude_deg_)>(
          reinterpret_cast<char*>(&latitude_deg_),
          reinterpret_cast<char*>(&other->latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MissionPlan::_Internal {
 public:
};

MissionPlan::MissionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mission_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mission_server.MissionPlan)
}
MissionPlan::MissionPlan(const MissionPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mission_items_(from.mission_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mission_server.MissionPlan)
}

void MissionPlan::SharedCtor() {
}

MissionPlan::~MissionPlan() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mission_server.MissionPlan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MissionPlan::ArenaDtor(void* object) {
  MissionPlan* _this = reinterpret_cast< MissionPlan* >(object);
  (void)_this;
}
void MissionPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MissionPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mission_server.MissionPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mavsdk.rpc.mission_server.MissionItem mission_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mission_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionPlan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mission_server.MissionPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.mission_server.MissionItem mission_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mission_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mission_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mission_server.MissionPlan)
  return target;
}

size_t MissionPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mission_server.MissionPlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.mission_server.MissionItem mission_items = 1;
  total_size += 1UL * this->_internal_mission_items_size();
  for (const auto& msg : this->mission_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionPlan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.mission_server.MissionPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionPlan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionPlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.mission_server.MissionPlan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.mission_server.MissionPlan)
    MergeFrom(*source);
  }
}

void MissionPlan::MergeFrom(const MissionPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mission_server.MissionPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_items_.MergeFrom(from.mission_items_);
}

void MissionPlan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.mission_server.MissionPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionPlan::CopyFrom(const MissionPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mission_server.MissionPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionPlan::IsInitialized() const {
  return true;
}

void MissionPlan::InternalSwap(MissionPlan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mission_items_.InternalSwap(&other->mission_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionPlan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MissionProgress::_Internal {
 public:
};

MissionProgress::MissionProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mission_server.MissionProgress)
}
MissionProgress::MissionProgress(const MissionProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_, &from.current_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&current_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mission_server.MissionProgress)
}

void MissionProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&current_)) + sizeof(total_));
}

MissionProgress::~MissionProgress() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mission_server.MissionProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MissionProgress::ArenaDtor(void* object) {
  MissionProgress* _this = reinterpret_cast< MissionProgress* >(object);
  (void)_this;
}
void MissionProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MissionProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mission_server.MissionProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&current_)) + sizeof(total_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mission_server.MissionProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 current = 1;
  if (this->current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_current(), target);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mission_server.MissionProgress)
  return target;
}

size_t MissionProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mission_server.MissionProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 current = 1;
  if (this->current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current());
  }

  // int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.mission_server.MissionProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.mission_server.MissionProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.mission_server.MissionProgress)
    MergeFrom(*source);
  }
}

void MissionProgress::MergeFrom(const MissionProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mission_server.MissionProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
}

void MissionProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.mission_server.MissionProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionProgress::CopyFrom(const MissionProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mission_server.MissionProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionProgress::IsInitialized() const {
  return true;
}

void MissionProgress::InternalSwap(MissionProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissionProgress, total_)
      + sizeof(MissionProgress::total_)
      - PROTOBUF_FIELD_OFFSET(MissionProgress, current_)>(
          reinterpret_cast<char*>(&current_),
          reinterpret_cast<char*>(&other->current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MissionResult::_Internal {
 public:
};

MissionResult::MissionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.mission_server.MissionResult)
}
MissionResult::MissionResult(const MissionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_str(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.mission_server.MissionResult)
}

void MissionResult::SharedCtor() {
result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

MissionResult::~MissionResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.mission_server.MissionResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MissionResult::ArenaDtor(void* object) {
  MissionResult* _this = reinterpret_cast< MissionResult* >(object);
  (void)_this;
}
void MissionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MissionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.mission_server.MissionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.mission_server.MissionResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::mission_server::MissionResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.mission_server.MissionResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.mission_server.MissionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.mission_server.MissionResult.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.mission_server.MissionResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.mission_server.MissionResult)
  return target;
}

size_t MissionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.mission_server.MissionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.mission_server.MissionResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.mission_server.MissionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.mission_server.MissionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.mission_server.MissionResult)
    MergeFrom(*source);
  }
}

void MissionResult::MergeFrom(const MissionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.mission_server.MissionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void MissionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.mission_server.MissionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionResult::CopyFrom(const MissionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.mission_server.MissionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionResult::IsInitialized() const {
  return true;
}

void MissionResult::InternalSwap(MissionResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mission_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mission_server::IncomingMissionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::mission_server::IncomingMissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mission_server::IncomingMissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mission_server::MissionItem* Arena::CreateMaybeMessage< ::mavsdk::rpc::mission_server::MissionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mission_server::MissionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mission_server::MissionPlan* Arena::CreateMaybeMessage< ::mavsdk::rpc::mission_server::MissionPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mission_server::MissionPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mission_server::MissionProgress* Arena::CreateMaybeMessage< ::mavsdk::rpc::mission_server::MissionProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mission_server::MissionProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::mission_server::MissionResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::mission_server::MissionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::mission_server::MissionResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
