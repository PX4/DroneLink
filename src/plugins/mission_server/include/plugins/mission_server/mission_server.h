// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/mission_server/mission_server.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

namespace mavsdk {

class System;
class MissionServerImpl;

/**
 * @brief Enable waypoint missions.
 */
class MissionServer : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto mission_server = MissionServer(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit MissionServer(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto mission_server = MissionServer(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit MissionServer(std::shared_ptr<System> system); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~MissionServer();

    /**
     * @brief Type representing a mission item.
     *
     * A MissionItem can contain a position and/or actions.
     * Mission items are building blocks to assemble a mission,
     * which can be sent to (or received from) a system.
     * They cannot be used independently.
     */
    struct MissionItem {
        /**
         * @brief Possible camera actions at a mission item.
         */
        enum class CameraAction {
            None, /**< @brief No action. */
            TakePhoto, /**< @brief Take a single photo. */
            StartPhotoInterval, /**< @brief Start capturing photos at regular intervals. */
            StopPhotoInterval, /**< @brief Stop capturing photos at regular intervals. */
            StartVideo, /**< @brief Start capturing video. */
            StopVideo, /**< @brief Stop capturing video. */
        };

        /**
         * @brief Stream operator to print information about a `MissionServer::CameraAction`.
         *
         * @return A reference to the stream.
         */
        friend std::ostream& operator<<(
            std::ostream& str, MissionServer::MissionItem::CameraAction const& camera_action);

        double latitude_deg{double(NAN)}; /**< @brief Latitude in degrees (range: -90 to +90) */
        double longitude_deg{double(NAN)}; /**< @brief Longitude in degrees (range: -180 to +180) */
        float relative_altitude_m{
            float(NAN)}; /**< @brief Altitude relative to takeoff altitude in metres */
        float speed_m_s{
            float(NAN)}; /**< @brief Speed to use after this mission item (in metres/second) */
        bool is_fly_through{
            false}; /**< @brief True will make the drone fly through without stopping, while false
                       will make the drone stop on the waypoint */
        float gimbal_pitch_deg{float(NAN)}; /**< @brief Gimbal pitch (in degrees) */
        float gimbal_yaw_deg{float(NAN)}; /**< @brief Gimbal yaw (in degrees) */
        CameraAction camera_action{}; /**< @brief Camera action to trigger at this mission item */
        float loiter_time_s{float(NAN)}; /**< @brief Loiter time (in seconds) */
        double camera_photo_interval_s{
            1.0}; /**< @brief Camera photo interval to use after this mission item (in seconds) */
        float acceptance_radius_m{
            float(NAN)}; /**< @brief Radius for completing a mission item (in metres) */
    };

    /**
     * @brief Equal operator to compare two `MissionServer::MissionItem` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool
    operator==(const MissionServer::MissionItem& lhs, const MissionServer::MissionItem& rhs);

    /**
     * @brief Stream operator to print information about a `MissionServer::MissionItem`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, MissionServer::MissionItem const& mission_item);

    /**
     * @brief Mission plan type
     */
    struct MissionPlan {
        std::vector<MissionItem> mission_items{}; /**< @brief The mission items */
    };

    /**
     * @brief Equal operator to compare two `MissionServer::MissionPlan` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool
    operator==(const MissionServer::MissionPlan& lhs, const MissionServer::MissionPlan& rhs);

    /**
     * @brief Stream operator to print information about a `MissionServer::MissionPlan`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, MissionServer::MissionPlan const& mission_plan);

    /**
     * @brief Mission progress type.
     */
    struct MissionProgress {
        int32_t current{}; /**< @brief Current mission item index (0-based), if equal to total, the
                              mission is finished */
        int32_t total{}; /**< @brief Total number of mission items */
    };

    /**
     * @brief Equal operator to compare two `MissionServer::MissionProgress` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(
        const MissionServer::MissionProgress& lhs, const MissionServer::MissionProgress& rhs);

    /**
     * @brief Stream operator to print information about a `MissionServer::MissionProgress`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, MissionServer::MissionProgress const& mission_progress);

    /**
     * @brief Possible results returned for action requests.
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Request succeeded. */
        Error, /**< @brief Error. */
        TooManyMissionItems, /**< @brief Too many mission items in the mission. */
        Busy, /**< @brief Vehicle is busy. */
        Timeout, /**< @brief Request timed out. */
        InvalidArgument, /**< @brief Invalid argument. */
        Unsupported, /**< @brief Mission downloaded from the system is not supported. */
        NoMissionAvailable, /**< @brief No mission available on the system. */
        UnsupportedMissionCmd, /**< @brief Unsupported mission command. */
        TransferCancelled, /**< @brief Mission transfer (upload or download) has been cancelled. */
        NoSystem, /**< @brief No system connected. */
    };

    /**
     * @brief Stream operator to print information about a `MissionServer::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, MissionServer::Result const& result);

    /**
     * @brief Callback type for asynchronous MissionServer calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Callback type for subscribe_incoming_mission.
     */

    using IncomingMissionCallback = std::function<void(MissionServer::Result, MissionPlan)>;

    /**
     * @brief Subscribe to when a new mission is uploaded (asynchronous).
     */
    void subscribe_incoming_mission(IncomingMissionCallback callback);

    /**
     * @brief Poll for 'MissionPlan' (blocking).
     *
     * @return One MissionPlan update.
     */
    MissionPlan incoming_mission() const;

    /**
     * @brief Copy constructor.
     */
    MissionServer(const MissionServer& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const MissionServer& operator=(const MissionServer&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<MissionServerImpl> _impl;
};

} // namespace mavsdk