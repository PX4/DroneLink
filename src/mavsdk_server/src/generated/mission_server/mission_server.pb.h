// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mission_server/mission_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mission_5fserver_2fmission_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mission_5fserver_2fmission_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mission_5fserver_2fmission_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mission_5fserver_2fmission_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mission_5fserver_2fmission_5fserver_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_metadata_getter(int index);
namespace mavsdk {
namespace rpc {
namespace mission_server {
class IncomingMissionResponse;
struct IncomingMissionResponseDefaultTypeInternal;
extern IncomingMissionResponseDefaultTypeInternal _IncomingMissionResponse_default_instance_;
class MissionItem;
struct MissionItemDefaultTypeInternal;
extern MissionItemDefaultTypeInternal _MissionItem_default_instance_;
class MissionPlan;
struct MissionPlanDefaultTypeInternal;
extern MissionPlanDefaultTypeInternal _MissionPlan_default_instance_;
class MissionProgress;
struct MissionProgressDefaultTypeInternal;
extern MissionProgressDefaultTypeInternal _MissionProgress_default_instance_;
class MissionResult;
struct MissionResultDefaultTypeInternal;
extern MissionResultDefaultTypeInternal _MissionResult_default_instance_;
class SubscribeIncomingMissionRequest;
struct SubscribeIncomingMissionRequestDefaultTypeInternal;
extern SubscribeIncomingMissionRequestDefaultTypeInternal _SubscribeIncomingMissionRequest_default_instance_;
}  // namespace mission_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::mission_server::IncomingMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_server::IncomingMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission_server::MissionItem* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_server::MissionItem>(Arena*);
template<> ::mavsdk::rpc::mission_server::MissionPlan* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_server::MissionPlan>(Arena*);
template<> ::mavsdk::rpc::mission_server::MissionProgress* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_server::MissionProgress>(Arena*);
template<> ::mavsdk::rpc::mission_server::MissionResult* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_server::MissionResult>(Arena*);
template<> ::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission_server::SubscribeIncomingMissionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace mission_server {

enum MissionItem_CameraAction : int {
  MissionItem_CameraAction_CAMERA_ACTION_NONE = 0,
  MissionItem_CameraAction_CAMERA_ACTION_TAKE_PHOTO = 1,
  MissionItem_CameraAction_CAMERA_ACTION_START_PHOTO_INTERVAL = 2,
  MissionItem_CameraAction_CAMERA_ACTION_STOP_PHOTO_INTERVAL = 3,
  MissionItem_CameraAction_CAMERA_ACTION_START_VIDEO = 4,
  MissionItem_CameraAction_CAMERA_ACTION_STOP_VIDEO = 5,
  MissionItem_CameraAction_MissionItem_CameraAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MissionItem_CameraAction_MissionItem_CameraAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MissionItem_CameraAction_IsValid(int value);
constexpr MissionItem_CameraAction MissionItem_CameraAction_CameraAction_MIN = MissionItem_CameraAction_CAMERA_ACTION_NONE;
constexpr MissionItem_CameraAction MissionItem_CameraAction_CameraAction_MAX = MissionItem_CameraAction_CAMERA_ACTION_STOP_VIDEO;
constexpr int MissionItem_CameraAction_CameraAction_ARRAYSIZE = MissionItem_CameraAction_CameraAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionItem_CameraAction_descriptor();
template<typename T>
inline const std::string& MissionItem_CameraAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MissionItem_CameraAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MissionItem_CameraAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MissionItem_CameraAction_descriptor(), enum_t_value);
}
inline bool MissionItem_CameraAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MissionItem_CameraAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MissionItem_CameraAction>(
    MissionItem_CameraAction_descriptor(), name, value);
}
enum MissionResult_Result : int {
  MissionResult_Result_RESULT_UNKNOWN = 0,
  MissionResult_Result_RESULT_SUCCESS = 1,
  MissionResult_Result_RESULT_ERROR = 2,
  MissionResult_Result_RESULT_TOO_MANY_MISSION_ITEMS = 3,
  MissionResult_Result_RESULT_BUSY = 4,
  MissionResult_Result_RESULT_TIMEOUT = 5,
  MissionResult_Result_RESULT_INVALID_ARGUMENT = 6,
  MissionResult_Result_RESULT_UNSUPPORTED = 7,
  MissionResult_Result_RESULT_NO_MISSION_AVAILABLE = 8,
  MissionResult_Result_RESULT_UNSUPPORTED_MISSION_CMD = 11,
  MissionResult_Result_RESULT_TRANSFER_CANCELLED = 12,
  MissionResult_Result_RESULT_NO_SYSTEM = 13,
  MissionResult_Result_MissionResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MissionResult_Result_MissionResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MissionResult_Result_IsValid(int value);
constexpr MissionResult_Result MissionResult_Result_Result_MIN = MissionResult_Result_RESULT_UNKNOWN;
constexpr MissionResult_Result MissionResult_Result_Result_MAX = MissionResult_Result_RESULT_NO_SYSTEM;
constexpr int MissionResult_Result_Result_ARRAYSIZE = MissionResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionResult_Result_descriptor();
template<typename T>
inline const std::string& MissionResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MissionResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MissionResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MissionResult_Result_descriptor(), enum_t_value);
}
inline bool MissionResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MissionResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MissionResult_Result>(
    MissionResult_Result_descriptor(), name, value);
}
// ===================================================================

class SubscribeIncomingMissionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest) */ {
 public:
  inline SubscribeIncomingMissionRequest() : SubscribeIncomingMissionRequest(nullptr) {}
  virtual ~SubscribeIncomingMissionRequest();
  explicit constexpr SubscribeIncomingMissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeIncomingMissionRequest(const SubscribeIncomingMissionRequest& from);
  SubscribeIncomingMissionRequest(SubscribeIncomingMissionRequest&& from) noexcept
    : SubscribeIncomingMissionRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeIncomingMissionRequest& operator=(const SubscribeIncomingMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeIncomingMissionRequest& operator=(SubscribeIncomingMissionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeIncomingMissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeIncomingMissionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeIncomingMissionRequest*>(
               &_SubscribeIncomingMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeIncomingMissionRequest& a, SubscribeIncomingMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeIncomingMissionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeIncomingMissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeIncomingMissionRequest* New() const final {
    return CreateMaybeMessage<SubscribeIncomingMissionRequest>(nullptr);
  }

  SubscribeIncomingMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeIncomingMissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeIncomingMissionRequest& from);
  void MergeFrom(const SubscribeIncomingMissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeIncomingMissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest";
  }
  protected:
  explicit SubscribeIncomingMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_server.SubscribeIncomingMissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fserver_2fmission_5fserver_2eproto;
};
// -------------------------------------------------------------------

class IncomingMissionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_server.IncomingMissionResponse) */ {
 public:
  inline IncomingMissionResponse() : IncomingMissionResponse(nullptr) {}
  virtual ~IncomingMissionResponse();
  explicit constexpr IncomingMissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncomingMissionResponse(const IncomingMissionResponse& from);
  IncomingMissionResponse(IncomingMissionResponse&& from) noexcept
    : IncomingMissionResponse() {
    *this = ::std::move(from);
  }

  inline IncomingMissionResponse& operator=(const IncomingMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncomingMissionResponse& operator=(IncomingMissionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IncomingMissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncomingMissionResponse* internal_default_instance() {
    return reinterpret_cast<const IncomingMissionResponse*>(
               &_IncomingMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IncomingMissionResponse& a, IncomingMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IncomingMissionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncomingMissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncomingMissionResponse* New() const final {
    return CreateMaybeMessage<IncomingMissionResponse>(nullptr);
  }

  IncomingMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncomingMissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IncomingMissionResponse& from);
  void MergeFrom(const IncomingMissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncomingMissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_server.IncomingMissionResponse";
  }
  protected:
  explicit IncomingMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
    kMissionPlanFieldNumber = 2,
  };
  // .mavsdk.rpc.mission_server.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission_server::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission_server::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission_server::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission_server::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission_server::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission_server::MissionResult* _internal_mutable_mission_result();
  public:
  void unsafe_arena_set_allocated_mission_result(
      ::mavsdk::rpc::mission_server::MissionResult* mission_result);
  ::mavsdk::rpc::mission_server::MissionResult* unsafe_arena_release_mission_result();

  // .mavsdk.rpc.mission_server.MissionPlan mission_plan = 2;
  bool has_mission_plan() const;
  private:
  bool _internal_has_mission_plan() const;
  public:
  void clear_mission_plan();
  const ::mavsdk::rpc::mission_server::MissionPlan& mission_plan() const;
  ::mavsdk::rpc::mission_server::MissionPlan* release_mission_plan();
  ::mavsdk::rpc::mission_server::MissionPlan* mutable_mission_plan();
  void set_allocated_mission_plan(::mavsdk::rpc::mission_server::MissionPlan* mission_plan);
  private:
  const ::mavsdk::rpc::mission_server::MissionPlan& _internal_mission_plan() const;
  ::mavsdk::rpc::mission_server::MissionPlan* _internal_mutable_mission_plan();
  public:
  void unsafe_arena_set_allocated_mission_plan(
      ::mavsdk::rpc::mission_server::MissionPlan* mission_plan);
  ::mavsdk::rpc::mission_server::MissionPlan* unsafe_arena_release_mission_plan();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_server.IncomingMissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::mission_server::MissionResult* mission_result_;
  ::mavsdk::rpc::mission_server::MissionPlan* mission_plan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fserver_2fmission_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MissionItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_server.MissionItem) */ {
 public:
  inline MissionItem() : MissionItem(nullptr) {}
  virtual ~MissionItem();
  explicit constexpr MissionItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionItem(const MissionItem& from);
  MissionItem(MissionItem&& from) noexcept
    : MissionItem() {
    *this = ::std::move(from);
  }

  inline MissionItem& operator=(const MissionItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionItem& operator=(MissionItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionItem* internal_default_instance() {
    return reinterpret_cast<const MissionItem*>(
               &_MissionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MissionItem& a, MissionItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionItem* New() const final {
    return CreateMaybeMessage<MissionItem>(nullptr);
  }

  MissionItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionItem& from);
  void MergeFrom(const MissionItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_server.MissionItem";
  }
  protected:
  explicit MissionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MissionItem_CameraAction CameraAction;
  static constexpr CameraAction CAMERA_ACTION_NONE =
    MissionItem_CameraAction_CAMERA_ACTION_NONE;
  static constexpr CameraAction CAMERA_ACTION_TAKE_PHOTO =
    MissionItem_CameraAction_CAMERA_ACTION_TAKE_PHOTO;
  static constexpr CameraAction CAMERA_ACTION_START_PHOTO_INTERVAL =
    MissionItem_CameraAction_CAMERA_ACTION_START_PHOTO_INTERVAL;
  static constexpr CameraAction CAMERA_ACTION_STOP_PHOTO_INTERVAL =
    MissionItem_CameraAction_CAMERA_ACTION_STOP_PHOTO_INTERVAL;
  static constexpr CameraAction CAMERA_ACTION_START_VIDEO =
    MissionItem_CameraAction_CAMERA_ACTION_START_VIDEO;
  static constexpr CameraAction CAMERA_ACTION_STOP_VIDEO =
    MissionItem_CameraAction_CAMERA_ACTION_STOP_VIDEO;
  static inline bool CameraAction_IsValid(int value) {
    return MissionItem_CameraAction_IsValid(value);
  }
  static constexpr CameraAction CameraAction_MIN =
    MissionItem_CameraAction_CameraAction_MIN;
  static constexpr CameraAction CameraAction_MAX =
    MissionItem_CameraAction_CameraAction_MAX;
  static constexpr int CameraAction_ARRAYSIZE =
    MissionItem_CameraAction_CameraAction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CameraAction_descriptor() {
    return MissionItem_CameraAction_descriptor();
  }
  template<typename T>
  static inline const std::string& CameraAction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CameraAction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CameraAction_Name.");
    return MissionItem_CameraAction_Name(enum_t_value);
  }
  static inline bool CameraAction_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CameraAction* value) {
    return MissionItem_CameraAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kRelativeAltitudeMFieldNumber = 3,
    kSpeedMSFieldNumber = 4,
    kIsFlyThroughFieldNumber = 5,
    kGimbalPitchDegFieldNumber = 6,
    kGimbalYawDegFieldNumber = 7,
    kCameraActionFieldNumber = 8,
    kCameraPhotoIntervalSFieldNumber = 10,
    kLoiterTimeSFieldNumber = 9,
    kAcceptanceRadiusMFieldNumber = 11,
  };
  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float relative_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);
  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);
  public:

  // float speed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_speed_m_s();
  float speed_m_s() const;
  void set_speed_m_s(float value);
  private:
  float _internal_speed_m_s() const;
  void _internal_set_speed_m_s(float value);
  public:

  // bool is_fly_through = 5 [(.mavsdk.options.default_value) = "false"];
  void clear_is_fly_through();
  bool is_fly_through() const;
  void set_is_fly_through(bool value);
  private:
  bool _internal_is_fly_through() const;
  void _internal_set_is_fly_through(bool value);
  public:

  // float gimbal_pitch_deg = 6 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];
  void clear_gimbal_pitch_deg();
  float gimbal_pitch_deg() const;
  void set_gimbal_pitch_deg(float value);
  private:
  float _internal_gimbal_pitch_deg() const;
  void _internal_set_gimbal_pitch_deg(float value);
  public:

  // float gimbal_yaw_deg = 7 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];
  void clear_gimbal_yaw_deg();
  float gimbal_yaw_deg() const;
  void set_gimbal_yaw_deg(float value);
  private:
  float _internal_gimbal_yaw_deg() const;
  void _internal_set_gimbal_yaw_deg(float value);
  public:

  // .mavsdk.rpc.mission_server.MissionItem.CameraAction camera_action = 8;
  void clear_camera_action();
  ::mavsdk::rpc::mission_server::MissionItem_CameraAction camera_action() const;
  void set_camera_action(::mavsdk::rpc::mission_server::MissionItem_CameraAction value);
  private:
  ::mavsdk::rpc::mission_server::MissionItem_CameraAction _internal_camera_action() const;
  void _internal_set_camera_action(::mavsdk::rpc::mission_server::MissionItem_CameraAction value);
  public:

  // double camera_photo_interval_s = 10 [(.mavsdk.options.default_value) = "1.0"];
  void clear_camera_photo_interval_s();
  double camera_photo_interval_s() const;
  void set_camera_photo_interval_s(double value);
  private:
  double _internal_camera_photo_interval_s() const;
  void _internal_set_camera_photo_interval_s(double value);
  public:

  // float loiter_time_s = 9 [(.mavsdk.options.default_value) = "NaN"];
  void clear_loiter_time_s();
  float loiter_time_s() const;
  void set_loiter_time_s(float value);
  private:
  float _internal_loiter_time_s() const;
  void _internal_set_loiter_time_s(float value);
  public:

  // float acceptance_radius_m = 11 [(.mavsdk.options.default_value) = "NaN"];
  void clear_acceptance_radius_m();
  float acceptance_radius_m() const;
  void set_acceptance_radius_m(float value);
  private:
  float _internal_acceptance_radius_m() const;
  void _internal_set_acceptance_radius_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_server.MissionItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_deg_;
  double longitude_deg_;
  float relative_altitude_m_;
  float speed_m_s_;
  bool is_fly_through_;
  float gimbal_pitch_deg_;
  float gimbal_yaw_deg_;
  int camera_action_;
  double camera_photo_interval_s_;
  float loiter_time_s_;
  float acceptance_radius_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fserver_2fmission_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MissionPlan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_server.MissionPlan) */ {
 public:
  inline MissionPlan() : MissionPlan(nullptr) {}
  virtual ~MissionPlan();
  explicit constexpr MissionPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionPlan(const MissionPlan& from);
  MissionPlan(MissionPlan&& from) noexcept
    : MissionPlan() {
    *this = ::std::move(from);
  }

  inline MissionPlan& operator=(const MissionPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionPlan& operator=(MissionPlan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionPlan* internal_default_instance() {
    return reinterpret_cast<const MissionPlan*>(
               &_MissionPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MissionPlan& a, MissionPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionPlan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionPlan* New() const final {
    return CreateMaybeMessage<MissionPlan>(nullptr);
  }

  MissionPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionPlan& from);
  void MergeFrom(const MissionPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_server.MissionPlan";
  }
  protected:
  explicit MissionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionItemsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.mission_server.MissionItem mission_items = 1;
  int mission_items_size() const;
  private:
  int _internal_mission_items_size() const;
  public:
  void clear_mission_items();
  ::mavsdk::rpc::mission_server::MissionItem* mutable_mission_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_server::MissionItem >*
      mutable_mission_items();
  private:
  const ::mavsdk::rpc::mission_server::MissionItem& _internal_mission_items(int index) const;
  ::mavsdk::rpc::mission_server::MissionItem* _internal_add_mission_items();
  public:
  const ::mavsdk::rpc::mission_server::MissionItem& mission_items(int index) const;
  ::mavsdk::rpc::mission_server::MissionItem* add_mission_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_server::MissionItem >&
      mission_items() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_server.MissionPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_server::MissionItem > mission_items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fserver_2fmission_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MissionProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_server.MissionProgress) */ {
 public:
  inline MissionProgress() : MissionProgress(nullptr) {}
  virtual ~MissionProgress();
  explicit constexpr MissionProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionProgress(const MissionProgress& from);
  MissionProgress(MissionProgress&& from) noexcept
    : MissionProgress() {
    *this = ::std::move(from);
  }

  inline MissionProgress& operator=(const MissionProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionProgress& operator=(MissionProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionProgress* internal_default_instance() {
    return reinterpret_cast<const MissionProgress*>(
               &_MissionProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MissionProgress& a, MissionProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionProgress* New() const final {
    return CreateMaybeMessage<MissionProgress>(nullptr);
  }

  MissionProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionProgress& from);
  void MergeFrom(const MissionProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_server.MissionProgress";
  }
  protected:
  explicit MissionProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // int32 current = 1;
  void clear_current();
  ::PROTOBUF_NAMESPACE_ID::int32 current() const;
  void set_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current() const;
  void _internal_set_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_server.MissionProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fserver_2fmission_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MissionResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission_server.MissionResult) */ {
 public:
  inline MissionResult() : MissionResult(nullptr) {}
  virtual ~MissionResult();
  explicit constexpr MissionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionResult(const MissionResult& from);
  MissionResult(MissionResult&& from) noexcept
    : MissionResult() {
    *this = ::std::move(from);
  }

  inline MissionResult& operator=(const MissionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionResult& operator=(MissionResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissionResult* internal_default_instance() {
    return reinterpret_cast<const MissionResult*>(
               &_MissionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MissionResult& a, MissionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionResult* New() const final {
    return CreateMaybeMessage<MissionResult>(nullptr);
  }

  MissionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionResult& from);
  void MergeFrom(const MissionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission_server.MissionResult";
  }
  protected:
  explicit MissionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mission_5fserver_2fmission_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MissionResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    MissionResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    MissionResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_ERROR =
    MissionResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TOO_MANY_MISSION_ITEMS =
    MissionResult_Result_RESULT_TOO_MANY_MISSION_ITEMS;
  static constexpr Result RESULT_BUSY =
    MissionResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_TIMEOUT =
    MissionResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_INVALID_ARGUMENT =
    MissionResult_Result_RESULT_INVALID_ARGUMENT;
  static constexpr Result RESULT_UNSUPPORTED =
    MissionResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_NO_MISSION_AVAILABLE =
    MissionResult_Result_RESULT_NO_MISSION_AVAILABLE;
  static constexpr Result RESULT_UNSUPPORTED_MISSION_CMD =
    MissionResult_Result_RESULT_UNSUPPORTED_MISSION_CMD;
  static constexpr Result RESULT_TRANSFER_CANCELLED =
    MissionResult_Result_RESULT_TRANSFER_CANCELLED;
  static constexpr Result RESULT_NO_SYSTEM =
    MissionResult_Result_RESULT_NO_SYSTEM;
  static inline bool Result_IsValid(int value) {
    return MissionResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    MissionResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    MissionResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    MissionResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return MissionResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return MissionResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return MissionResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const char* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.mission_server.MissionResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::mission_server::MissionResult_Result result() const;
  void set_result(::mavsdk::rpc::mission_server::MissionResult_Result value);
  private:
  ::mavsdk::rpc::mission_server::MissionResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::mission_server::MissionResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission_server.MissionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_5fserver_2fmission_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeIncomingMissionRequest

// -------------------------------------------------------------------

// IncomingMissionResponse

// .mavsdk.rpc.mission_server.MissionResult mission_result = 1;
inline bool IncomingMissionResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool IncomingMissionResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void IncomingMissionResponse::clear_mission_result() {
  if (GetArena() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission_server::MissionResult& IncomingMissionResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission_server::MissionResult* p = mission_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_server::MissionResult&>(
      ::mavsdk::rpc::mission_server::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission_server::MissionResult& IncomingMissionResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.IncomingMissionResponse.mission_result)
  return _internal_mission_result();
}
inline void IncomingMissionResponse::unsafe_arena_set_allocated_mission_result(
    ::mavsdk::rpc::mission_server::MissionResult* mission_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_result_);
  }
  mission_result_ = mission_result;
  if (mission_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_server.IncomingMissionResponse.mission_result)
}
inline ::mavsdk::rpc::mission_server::MissionResult* IncomingMissionResponse::release_mission_result() {
  
  ::mavsdk::rpc::mission_server::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::mission_server::MissionResult* IncomingMissionResponse::unsafe_arena_release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_server.IncomingMissionResponse.mission_result)
  
  ::mavsdk::rpc::mission_server::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_server::MissionResult* IncomingMissionResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_server::MissionResult>(GetArena());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission_server::MissionResult* IncomingMissionResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_server.IncomingMissionResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void IncomingMissionResponse::set_allocated_mission_result(::mavsdk::rpc::mission_server::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mission_result);
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_server.IncomingMissionResponse.mission_result)
}

// .mavsdk.rpc.mission_server.MissionPlan mission_plan = 2;
inline bool IncomingMissionResponse::_internal_has_mission_plan() const {
  return this != internal_default_instance() && mission_plan_ != nullptr;
}
inline bool IncomingMissionResponse::has_mission_plan() const {
  return _internal_has_mission_plan();
}
inline void IncomingMissionResponse::clear_mission_plan() {
  if (GetArena() == nullptr && mission_plan_ != nullptr) {
    delete mission_plan_;
  }
  mission_plan_ = nullptr;
}
inline const ::mavsdk::rpc::mission_server::MissionPlan& IncomingMissionResponse::_internal_mission_plan() const {
  const ::mavsdk::rpc::mission_server::MissionPlan* p = mission_plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::mission_server::MissionPlan&>(
      ::mavsdk::rpc::mission_server::_MissionPlan_default_instance_);
}
inline const ::mavsdk::rpc::mission_server::MissionPlan& IncomingMissionResponse::mission_plan() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.IncomingMissionResponse.mission_plan)
  return _internal_mission_plan();
}
inline void IncomingMissionResponse::unsafe_arena_set_allocated_mission_plan(
    ::mavsdk::rpc::mission_server::MissionPlan* mission_plan) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_plan_);
  }
  mission_plan_ = mission_plan;
  if (mission_plan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.mission_server.IncomingMissionResponse.mission_plan)
}
inline ::mavsdk::rpc::mission_server::MissionPlan* IncomingMissionResponse::release_mission_plan() {
  
  ::mavsdk::rpc::mission_server::MissionPlan* temp = mission_plan_;
  mission_plan_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mavsdk::rpc::mission_server::MissionPlan* IncomingMissionResponse::unsafe_arena_release_mission_plan() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_server.IncomingMissionResponse.mission_plan)
  
  ::mavsdk::rpc::mission_server::MissionPlan* temp = mission_plan_;
  mission_plan_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission_server::MissionPlan* IncomingMissionResponse::_internal_mutable_mission_plan() {
  
  if (mission_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission_server::MissionPlan>(GetArena());
    mission_plan_ = p;
  }
  return mission_plan_;
}
inline ::mavsdk::rpc::mission_server::MissionPlan* IncomingMissionResponse::mutable_mission_plan() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_server.IncomingMissionResponse.mission_plan)
  return _internal_mutable_mission_plan();
}
inline void IncomingMissionResponse::set_allocated_mission_plan(::mavsdk::rpc::mission_server::MissionPlan* mission_plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mission_plan_;
  }
  if (mission_plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mission_plan);
    if (message_arena != submessage_arena) {
      mission_plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_ = mission_plan;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_server.IncomingMissionResponse.mission_plan)
}

// -------------------------------------------------------------------

// MissionItem

// double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];
inline void MissionItem::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double MissionItem::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double MissionItem::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionItem.latitude_deg)
  return _internal_latitude_deg();
}
inline void MissionItem::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void MissionItem::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionItem.latitude_deg)
}

// double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];
inline void MissionItem::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double MissionItem::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double MissionItem::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionItem.longitude_deg)
  return _internal_longitude_deg();
}
inline void MissionItem::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void MissionItem::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionItem.longitude_deg)
}

// float relative_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void MissionItem::clear_relative_altitude_m() {
  relative_altitude_m_ = 0;
}
inline float MissionItem::_internal_relative_altitude_m() const {
  return relative_altitude_m_;
}
inline float MissionItem::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionItem.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void MissionItem::_internal_set_relative_altitude_m(float value) {
  
  relative_altitude_m_ = value;
}
inline void MissionItem::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionItem.relative_altitude_m)
}

// float speed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void MissionItem::clear_speed_m_s() {
  speed_m_s_ = 0;
}
inline float MissionItem::_internal_speed_m_s() const {
  return speed_m_s_;
}
inline float MissionItem::speed_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionItem.speed_m_s)
  return _internal_speed_m_s();
}
inline void MissionItem::_internal_set_speed_m_s(float value) {
  
  speed_m_s_ = value;
}
inline void MissionItem::set_speed_m_s(float value) {
  _internal_set_speed_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionItem.speed_m_s)
}

// bool is_fly_through = 5 [(.mavsdk.options.default_value) = "false"];
inline void MissionItem::clear_is_fly_through() {
  is_fly_through_ = false;
}
inline bool MissionItem::_internal_is_fly_through() const {
  return is_fly_through_;
}
inline bool MissionItem::is_fly_through() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionItem.is_fly_through)
  return _internal_is_fly_through();
}
inline void MissionItem::_internal_set_is_fly_through(bool value) {
  
  is_fly_through_ = value;
}
inline void MissionItem::set_is_fly_through(bool value) {
  _internal_set_is_fly_through(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionItem.is_fly_through)
}

// float gimbal_pitch_deg = 6 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];
inline void MissionItem::clear_gimbal_pitch_deg() {
  gimbal_pitch_deg_ = 0;
}
inline float MissionItem::_internal_gimbal_pitch_deg() const {
  return gimbal_pitch_deg_;
}
inline float MissionItem::gimbal_pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionItem.gimbal_pitch_deg)
  return _internal_gimbal_pitch_deg();
}
inline void MissionItem::_internal_set_gimbal_pitch_deg(float value) {
  
  gimbal_pitch_deg_ = value;
}
inline void MissionItem::set_gimbal_pitch_deg(float value) {
  _internal_set_gimbal_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionItem.gimbal_pitch_deg)
}

// float gimbal_yaw_deg = 7 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];
inline void MissionItem::clear_gimbal_yaw_deg() {
  gimbal_yaw_deg_ = 0;
}
inline float MissionItem::_internal_gimbal_yaw_deg() const {
  return gimbal_yaw_deg_;
}
inline float MissionItem::gimbal_yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionItem.gimbal_yaw_deg)
  return _internal_gimbal_yaw_deg();
}
inline void MissionItem::_internal_set_gimbal_yaw_deg(float value) {
  
  gimbal_yaw_deg_ = value;
}
inline void MissionItem::set_gimbal_yaw_deg(float value) {
  _internal_set_gimbal_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionItem.gimbal_yaw_deg)
}

// .mavsdk.rpc.mission_server.MissionItem.CameraAction camera_action = 8;
inline void MissionItem::clear_camera_action() {
  camera_action_ = 0;
}
inline ::mavsdk::rpc::mission_server::MissionItem_CameraAction MissionItem::_internal_camera_action() const {
  return static_cast< ::mavsdk::rpc::mission_server::MissionItem_CameraAction >(camera_action_);
}
inline ::mavsdk::rpc::mission_server::MissionItem_CameraAction MissionItem::camera_action() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionItem.camera_action)
  return _internal_camera_action();
}
inline void MissionItem::_internal_set_camera_action(::mavsdk::rpc::mission_server::MissionItem_CameraAction value) {
  
  camera_action_ = value;
}
inline void MissionItem::set_camera_action(::mavsdk::rpc::mission_server::MissionItem_CameraAction value) {
  _internal_set_camera_action(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionItem.camera_action)
}

// float loiter_time_s = 9 [(.mavsdk.options.default_value) = "NaN"];
inline void MissionItem::clear_loiter_time_s() {
  loiter_time_s_ = 0;
}
inline float MissionItem::_internal_loiter_time_s() const {
  return loiter_time_s_;
}
inline float MissionItem::loiter_time_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionItem.loiter_time_s)
  return _internal_loiter_time_s();
}
inline void MissionItem::_internal_set_loiter_time_s(float value) {
  
  loiter_time_s_ = value;
}
inline void MissionItem::set_loiter_time_s(float value) {
  _internal_set_loiter_time_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionItem.loiter_time_s)
}

// double camera_photo_interval_s = 10 [(.mavsdk.options.default_value) = "1.0"];
inline void MissionItem::clear_camera_photo_interval_s() {
  camera_photo_interval_s_ = 0;
}
inline double MissionItem::_internal_camera_photo_interval_s() const {
  return camera_photo_interval_s_;
}
inline double MissionItem::camera_photo_interval_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionItem.camera_photo_interval_s)
  return _internal_camera_photo_interval_s();
}
inline void MissionItem::_internal_set_camera_photo_interval_s(double value) {
  
  camera_photo_interval_s_ = value;
}
inline void MissionItem::set_camera_photo_interval_s(double value) {
  _internal_set_camera_photo_interval_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionItem.camera_photo_interval_s)
}

// float acceptance_radius_m = 11 [(.mavsdk.options.default_value) = "NaN"];
inline void MissionItem::clear_acceptance_radius_m() {
  acceptance_radius_m_ = 0;
}
inline float MissionItem::_internal_acceptance_radius_m() const {
  return acceptance_radius_m_;
}
inline float MissionItem::acceptance_radius_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionItem.acceptance_radius_m)
  return _internal_acceptance_radius_m();
}
inline void MissionItem::_internal_set_acceptance_radius_m(float value) {
  
  acceptance_radius_m_ = value;
}
inline void MissionItem::set_acceptance_radius_m(float value) {
  _internal_set_acceptance_radius_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionItem.acceptance_radius_m)
}

// -------------------------------------------------------------------

// MissionPlan

// repeated .mavsdk.rpc.mission_server.MissionItem mission_items = 1;
inline int MissionPlan::_internal_mission_items_size() const {
  return mission_items_.size();
}
inline int MissionPlan::mission_items_size() const {
  return _internal_mission_items_size();
}
inline void MissionPlan::clear_mission_items() {
  mission_items_.Clear();
}
inline ::mavsdk::rpc::mission_server::MissionItem* MissionPlan::mutable_mission_items(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_server.MissionPlan.mission_items)
  return mission_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_server::MissionItem >*
MissionPlan::mutable_mission_items() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.mission_server.MissionPlan.mission_items)
  return &mission_items_;
}
inline const ::mavsdk::rpc::mission_server::MissionItem& MissionPlan::_internal_mission_items(int index) const {
  return mission_items_.Get(index);
}
inline const ::mavsdk::rpc::mission_server::MissionItem& MissionPlan::mission_items(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionPlan.mission_items)
  return _internal_mission_items(index);
}
inline ::mavsdk::rpc::mission_server::MissionItem* MissionPlan::_internal_add_mission_items() {
  return mission_items_.Add();
}
inline ::mavsdk::rpc::mission_server::MissionItem* MissionPlan::add_mission_items() {
  // @@protoc_insertion_point(field_add:mavsdk.rpc.mission_server.MissionPlan.mission_items)
  return _internal_add_mission_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission_server::MissionItem >&
MissionPlan::mission_items() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.mission_server.MissionPlan.mission_items)
  return mission_items_;
}

// -------------------------------------------------------------------

// MissionProgress

// int32 current = 1;
inline void MissionProgress::clear_current() {
  current_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::_internal_current() const {
  return current_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::current() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionProgress.current)
  return _internal_current();
}
inline void MissionProgress::_internal_set_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_ = value;
}
inline void MissionProgress::set_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionProgress.current)
}

// int32 total = 2;
inline void MissionProgress::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::total() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionProgress.total)
  return _internal_total();
}
inline void MissionProgress::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void MissionProgress::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionProgress.total)
}

// -------------------------------------------------------------------

// MissionResult

// .mavsdk.rpc.mission_server.MissionResult.Result result = 1;
inline void MissionResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::mission_server::MissionResult_Result MissionResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::mission_server::MissionResult_Result >(result_);
}
inline ::mavsdk::rpc::mission_server::MissionResult_Result MissionResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionResult.result)
  return _internal_result();
}
inline void MissionResult::_internal_set_result(::mavsdk::rpc::mission_server::MissionResult_Result value) {
  
  result_ = value;
}
inline void MissionResult::set_result(::mavsdk::rpc::mission_server::MissionResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionResult.result)
}

// string result_str = 2;
inline void MissionResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& MissionResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission_server.MissionResult.result_str)
  return _internal_result_str();
}
inline void MissionResult::set_result_str(const std::string& value) {
  _internal_set_result_str(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission_server.MissionResult.result_str)
}
inline std::string* MissionResult::mutable_result_str() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission_server.MissionResult.result_str)
  return _internal_mutable_result_str();
}
inline const std::string& MissionResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void MissionResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MissionResult::set_result_str(std::string&& value) {
  
  result_str_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.mission_server.MissionResult.result_str)
}
inline void MissionResult::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.mission_server.MissionResult.result_str)
}
inline void MissionResult::set_result_str(const char* value,
    size_t size) {
  
  result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.mission_server.MissionResult.result_str)
}
inline std::string* MissionResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MissionResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission_server.MissionResult.result_str)
  return result_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MissionResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission_server.MissionResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission_server
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::mission_server::MissionItem_CameraAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::mission_server::MissionItem_CameraAction>() {
  return ::mavsdk::rpc::mission_server::MissionItem_CameraAction_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::mission_server::MissionResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::mission_server::MissionResult_Result>() {
  return ::mavsdk::rpc::mission_server::MissionResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mission_5fserver_2fmission_5fserver_2eproto
