// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/mission_server/mission_server.proto)

#include <iomanip>

#include "mission_server_impl.h"
#include "plugins/mission_server/mission_server.h"

namespace mavsdk {

using MissionItem = MissionServer::MissionItem;
using MissionPlan = MissionServer::MissionPlan;
using MissionProgress = MissionServer::MissionProgress;

MissionServer::MissionServer(System& system) :
    PluginBase(),
    _impl{std::make_unique<MissionServerImpl>(system)}
{}

MissionServer::MissionServer(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{std::make_unique<MissionServerImpl>(system)}
{}

MissionServer::~MissionServer() {}

void MissionServer::subscribe_incoming_mission(IncomingMissionCallback callback)
{
    _impl->subscribe_incoming_mission(callback);
}

MissionServer::MissionPlan MissionServer::incoming_mission() const
{
    return _impl->incoming_mission();
}

std::ostream&
operator<<(std::ostream& str, MissionServer::MissionItem::CameraAction const& camera_action)
{
    switch (camera_action) {
        case MissionServer::MissionItem::CameraAction::None:
            return str << "None";
        case MissionServer::MissionItem::CameraAction::TakePhoto:
            return str << "Take Photo";
        case MissionServer::MissionItem::CameraAction::StartPhotoInterval:
            return str << "Start Photo Interval";
        case MissionServer::MissionItem::CameraAction::StopPhotoInterval:
            return str << "Stop Photo Interval";
        case MissionServer::MissionItem::CameraAction::StartVideo:
            return str << "Start Video";
        case MissionServer::MissionItem::CameraAction::StopVideo:
            return str << "Stop Video";
        default:
            return str << "Unknown";
    }
}
bool operator==(const MissionServer::MissionItem& lhs, const MissionServer::MissionItem& rhs)
{
    return ((std::isnan(rhs.latitude_deg) && std::isnan(lhs.latitude_deg)) ||
            (std::fabs(rhs.latitude_deg - lhs.latitude_deg) < 1e-07)) &&
           ((std::isnan(rhs.longitude_deg) && std::isnan(lhs.longitude_deg)) ||
            (std::fabs(rhs.longitude_deg - lhs.longitude_deg) < 1e-07)) &&
           ((std::isnan(rhs.relative_altitude_m) && std::isnan(lhs.relative_altitude_m)) ||
            rhs.relative_altitude_m == lhs.relative_altitude_m) &&
           ((std::isnan(rhs.speed_m_s) && std::isnan(lhs.speed_m_s)) ||
            rhs.speed_m_s == lhs.speed_m_s) &&
           (rhs.is_fly_through == lhs.is_fly_through) &&
           ((std::isnan(rhs.gimbal_pitch_deg) && std::isnan(lhs.gimbal_pitch_deg)) ||
            rhs.gimbal_pitch_deg == lhs.gimbal_pitch_deg) &&
           ((std::isnan(rhs.gimbal_yaw_deg) && std::isnan(lhs.gimbal_yaw_deg)) ||
            rhs.gimbal_yaw_deg == lhs.gimbal_yaw_deg) &&
           (rhs.camera_action == lhs.camera_action) &&
           ((std::isnan(rhs.loiter_time_s) && std::isnan(lhs.loiter_time_s)) ||
            rhs.loiter_time_s == lhs.loiter_time_s) &&
           ((std::isnan(rhs.camera_photo_interval_s) && std::isnan(lhs.camera_photo_interval_s)) ||
            rhs.camera_photo_interval_s == lhs.camera_photo_interval_s) &&
           ((std::isnan(rhs.acceptance_radius_m) && std::isnan(lhs.acceptance_radius_m)) ||
            rhs.acceptance_radius_m == lhs.acceptance_radius_m);
}

std::ostream& operator<<(std::ostream& str, MissionServer::MissionItem const& mission_item)
{
    str << std::setprecision(15);
    str << "mission_item:" << '\n' << "{\n";
    str << "    latitude_deg: " << mission_item.latitude_deg << '\n';
    str << "    longitude_deg: " << mission_item.longitude_deg << '\n';
    str << "    relative_altitude_m: " << mission_item.relative_altitude_m << '\n';
    str << "    speed_m_s: " << mission_item.speed_m_s << '\n';
    str << "    is_fly_through: " << mission_item.is_fly_through << '\n';
    str << "    gimbal_pitch_deg: " << mission_item.gimbal_pitch_deg << '\n';
    str << "    gimbal_yaw_deg: " << mission_item.gimbal_yaw_deg << '\n';
    str << "    camera_action: " << mission_item.camera_action << '\n';
    str << "    loiter_time_s: " << mission_item.loiter_time_s << '\n';
    str << "    camera_photo_interval_s: " << mission_item.camera_photo_interval_s << '\n';
    str << "    acceptance_radius_m: " << mission_item.acceptance_radius_m << '\n';
    str << '}';
    return str;
}

bool operator==(const MissionServer::MissionPlan& lhs, const MissionServer::MissionPlan& rhs)
{
    return (rhs.mission_items == lhs.mission_items);
}

std::ostream& operator<<(std::ostream& str, MissionServer::MissionPlan const& mission_plan)
{
    str << std::setprecision(15);
    str << "mission_plan:" << '\n' << "{\n";
    str << "    mission_items: [";
    for (auto it = mission_plan.mission_items.begin(); it != mission_plan.mission_items.end();
         ++it) {
        str << *it;
        str << (it + 1 != mission_plan.mission_items.end() ? ", " : "]\n");
    }
    str << '}';
    return str;
}

bool operator==(
    const MissionServer::MissionProgress& lhs, const MissionServer::MissionProgress& rhs)
{
    return (rhs.current == lhs.current) && (rhs.total == lhs.total);
}

std::ostream& operator<<(std::ostream& str, MissionServer::MissionProgress const& mission_progress)
{
    str << std::setprecision(15);
    str << "mission_progress:" << '\n' << "{\n";
    str << "    current: " << mission_progress.current << '\n';
    str << "    total: " << mission_progress.total << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, MissionServer::Result const& result)
{
    switch (result) {
        case MissionServer::Result::Unknown:
            return str << "Unknown";
        case MissionServer::Result::Success:
            return str << "Success";
        case MissionServer::Result::Error:
            return str << "Error";
        case MissionServer::Result::TooManyMissionItems:
            return str << "Too Many Mission Items";
        case MissionServer::Result::Busy:
            return str << "Busy";
        case MissionServer::Result::Timeout:
            return str << "Timeout";
        case MissionServer::Result::InvalidArgument:
            return str << "Invalid Argument";
        case MissionServer::Result::Unsupported:
            return str << "Unsupported";
        case MissionServer::Result::NoMissionAvailable:
            return str << "No Mission Available";
        case MissionServer::Result::UnsupportedMissionCmd:
            return str << "Unsupported Mission Cmd";
        case MissionServer::Result::TransferCancelled:
            return str << "Transfer Cancelled";
        case MissionServer::Result::NoSystem:
            return str << "No System";
        default:
            return str << "Unknown";
    }
}

} // namespace mavsdk